'use strict';

var Joi = require('joi');

function initDatabase(server, options, cb) {
  cb = cb || function () {};

  var r = server.plugins['think-hapi'].r;
  var conn = server.plugins['think-hapi'].conn;

  // Create any databases/tables/indicies
  r.dbCreate('cards').run(conn)
    .then(function(status) {
      r.db('cards').tableCreate('cards').run(conn).error(function (err) {
        console.log('cards table already exists');
      });

      r.db('cards').tableCreate('users').run(conn).error(function (err) {
        console.log('userss table already exists');
      });
    })
    .error(function(err) {
      console.log('cards database already exists');
    })
    .finally(cb);
}

// TODO: move Joi validation objects to a different file
// Reward details
var reward = Joi.object({
  startMonth: Joi.number().integer().min(1).max(12).required().description('Month that the reward begins'),
  endMonth: Joi.number().integer().min(1).max(12).required().description('Month that the reward ends'),
  categories: Joi.array().min(1).items(Joi.object({
    category: Joi.string().required().description('Category name'),
    description: Joi.string().optional().description('Category description'),
    cashBack: Joi.number().min(0.1).precision(1).description('Cash back percentage')
  }))
}).meta({
  className: 'Reward'
});

// Allowed credit card companies
var companies = ['VISA', 'Mastercard', 'Discover', 'AMEX'];

// Card details response object (includes Id)
var cardDetails = Joi.object({
  id: Joi.string().guid().required().description('Card Id'),
  company: Joi.string().required().valid(companies).description('Card company'),
  name: Joi.string().required().description('Card name'),
  rewards: Joi.array().items(reward).description('List of rewards')
}).meta({
  className: 'CardDetails'
});

// Creating a new card, requires company, name, and rewards
var cardNew = Joi.object({
  id: Joi.any().forbidden().description('Card Id'),
  company: Joi.string().required().valid(companies).description('Card company'),
  name: Joi.string().required().description('Card name'),
  rewards: Joi.array().min(1).items(reward).description('List of rewards')
}).meta({
  className: 'CardNew'
});

// Updating a card, merges the object so everything is optional.
// NOTE: rewards array is not merged properly, must send all rewards when updating
var cardUpdate = Joi.object({
  id: Joi.any().forbidden().description('Card Id'),
  company: Joi.string().optional().valid(companies).description('Card company'),
  name: Joi.string().optional().description('Card name'),
  rewards: Joi.array().min(1).items(reward).description('List of rewards')
}).meta({
  className: 'CardUpdate'
});

function initRoutes(server, options, cb) {
  cb = cb || function () {};

  server.route({
    method: 'GET',
    path: '/cards/list',
    handler: require('./handlers/listAll'),
    config: {
      description: 'List of all available cards',
      tags: ['api'],
      notes: ["Returns a basic summary of all stored cards, use the details endpoint to get specific information."],
      plugins: {
        'hapi-swagger': {
          responseMessages: [
            {
              code: 500,
              message: 'Internal Server Error - Unhandled exception on the server side'
            }
          ]
        }
      },
      response: {
        schema: Joi.array().items(cardDetails)
      }
    }
  });

  server.route({
    method: 'GET',
    path: '/cards/{cardId}/details',
    handler: require('./handlers/details'),
    config: {
      description: 'Get the details about a card',
      tags: ['api'],
      notes: ["Returns all stored details about a card by Id."],
      plugins: {
        'hapi-swagger': {
          responseMessages: [
            {
              code: 400,
              message: 'Bad Request - Client request was malformed or could not be fulfilled'
            },
            {
              code: 404,
              message: 'Not Found - Card not found'
            },
            {
              code: 500,
              message: 'Internal Server Error - Unhandled exception on the server side'
            }
          ]
        }
      },
      validate: {
        params: {
          cardId: Joi.string().guid()
            .description('Card UUID')
        }
      },
      response: {
        schema: cardDetails
      }
    }
  });

  server.route({
    method: 'POST',
    path: '/cards/create',
    handler: require('./handlers/create'),
    config: {
      description: 'Create a new card',
      tags: ['api'],
      notes: ["Creates and stores a new card, returns the new card details with autogenerated UUID."],
      plugins: {
        'hapi-swagger': {
          responseMessages: [
            {
              code: 400,
              message: 'Bad Request - Client request was malformed or could not be fulfilled'
            },
            {
              code: 500,
              message: 'Internal Server Error - Unhandled exception on the server side'
            }
          ]
        }
      },
      validate: {
        payload: cardNew
      },
      response: {
        schema: cardDetails
      }
    }
  });

  server.route({
    method: 'PUT',
    path: '/cards/{cardId}/update',
    handler: require('./handlers/update'),
    config: {
      description: 'Update the details about card',
      tags: ['api'],
      notes: ["Merges fields in the payload with the current stored card, returns the updated details."],
      plugins: {
        'hapi-swagger': {
          responseMessages: [
            {
              code: 400,
              message: 'Bad Request - Client request was malformed or could not be fulfilled'
            },
            {
              code: 404,
              message: 'Not Found - Card not found'
            },
            {
              code: 500,
              message: 'Internal Server Error - Unhandled exception on the server side'
            }
          ]
        }
      },
      validate: {
        params: {
          cardId: Joi.string().guid()
            .description('Card UUID')
        },
        payload: cardUpdate
      },
      response: {
        schema: cardDetails
      }
    }
  });

  cb(null);
}

exports.register = function (server, options, next) {
  initDatabase(server, options, function (err) {
    if (err) {
      next(err);
    }

    initRoutes(server, options, function (err) {
      if (err) {
        next(err);
      }

      // Registered successfully
      next();
    });
  });
}

exports.register.attributes = {
  name: 'cards',
  version: '0.0.1',
  dependencies: ['hapi-swagger', 'think-hapi']
};
